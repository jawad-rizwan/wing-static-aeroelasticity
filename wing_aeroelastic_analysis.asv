% Clear all
clear; clc; close all;

%% Defining initial parameters.

% Chord lengths
c_1 = 0.3; % chord length from elastic axis to trailing edge
c_2 = 0.4; % chord length from leading edge to elastic axis
c_r = c_1  + c_2; % root chord
c_t = 1.75*c_1; % wing tip chord
c_mean = (c_r + c_t)/2; % mean chord

s = 2; % span 

% Lift distribution function
cl_alpha = @(eta) 2*pi .* sqrt(1 - eta.^2);

% Chord function 
c = @(eta) c_r - (c_r - c_t).*eta;

% ec function
ec = @(eta) c(eta) - c_1 - 0.25.*c(eta);

% GJ constants 
GJ_1 = 8500;
GJ_2 = 7500;
GJ = @(eta) (GJ_1 * (1 - 0.25.*eta)) .* (eta < 0.5) + ...
            (GJ_2 * (1- 0.2.*eta)) .* (eta >= 0.5);

%% Part 1: Find divergence dynamic pressure using assumed modes method

% Max number of modes
n_max = 5;

% Cell arrays for store mode functions and derivatives
f = cell(n, 1);           
f_prime = cell(n, 1);     

% Matrix to store calculated divergence pressures for each mode
q_div = zeros(1,n_max);

% Matrix to store calculated divergence pressures for each mode
q_div = zeros(1,n_max);

% Create mode functions and derivatives
for i = 1:n_max
    f{i} = @(eta) i.*eta.^i;              % f_i = i*η^i
    f_prime{i} = @(eta) i.^2 .* eta.^(i-1); % f'_i = i^2*η^(i-1)
end

% Try each mode function until convergence
for n = 1:n_max

    % Initialize stiffness matrices
    E = zeros(n, n);    % Elastic stiffness matrix
    K = zeros(n, n);    % Aerodynamic stiffness matrix
    
    % Build E and K matrices
    fprintf('Building stiffness matrices...\n');
    for i = 1:n
        for j = 1:n
            
            % Segment 1: [0, 0.5] with GJ_1
            integrand_E1 = @(eta) (GJ_1 * (1 - 0.25*eta)) .* ...
                                  f_prime{i}(eta) .* f_prime{j}(eta);
            E_part1 = integral(integrand_E1, 0, 0.5);
            
            % Segment 2: [0.5, 1.0] with GJ_2
            integrand_E2 = @(eta) (GJ_2 * (1 - 0.2*eta)) .* ...
                                  f_prime{i}(eta) .* f_prime{j}(eta);
            E_part2 = integral(integrand_E2, 0.5, 1.0);
            
            % Final E value
            E(i,j) = (1/s) * (E_part1 + E_part2);
            
            % Aerodynamic stiffness
            integrand_K = @(eta) c(eta) .* ec(eta) .* cl_alpha(eta) .* ...
                                 f{i}(eta) .* f{j}(eta);
            K(i,j) = s * integral(integrand_K, 0, 1);
        end
    end

    % Solve [E] + [K] = 0 with eigenvalues
    q_div(n) = eig(E, -K);

    % Calculate error


end  


